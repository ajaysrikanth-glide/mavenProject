package pages;

import java.util.List;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import seleniumWrappers.wrappers;

public class LeadsPage_Dashboard extends wrappers{
	
	WebDriver driver;

	public LeadsPage_Dashboard(WebDriver driver) {

		this.driver = driver;

		PageFactory.initElements(driver, this);

	}
	
	@FindBy(xpath = "(//*[contains(@class,'leads_rectangle')]/div[1])[1]")
	public WebElement leadsGeneratedValue;
	
	@FindBy(xpath = "(//*[contains(@class,'leads_rectangle')]/div[1])[2]")
	public WebElement leadsConvertedValue;
	
	@FindBy(xpath = "//*[text()='Category']")
	WebElement categoryText;
	
	@FindBy(xpath ="//*[contains(@class,'leads_rectangle')][1]//img")
	WebElement leadsGeneratedIndicator;
	
	@FindBy(xpath ="//*[contains(@class,'leads_rectangle')][1]//span")
	WebElement leadsGeneratedIndicatorValue;
	
	@FindBy(xpath ="(//*[contains(@class,'leads_rectangle')]/div[1])[2]")
	WebElement leadsLostValue;
	
	@FindBy(xpath ="//*[contains(@class,'leads_rectangle')][2]//img")
	WebElement leadsLostIndicator;
	
	@FindBy(xpath ="//*[contains(@class,'leads_rectangle')][2]//span")
	WebElement leadsLostIndicatorValue;
	
	@FindBy(xpath ="(//*[contains(@class,'leads_rectangle')]/div[1])[3]")
	WebElement coversionRateValue;
	
	@FindBy(xpath = "//*[contains(@class,'leads_rectangle')][3]//img")
	WebElement coversionRateIndicator;
	
	@FindBy(xpath ="//*[contains(@class,'leads_rectangle')][3]//span")
	WebElement coversionRateIndicatorValue;
	
	@FindBy(xpath = "(//*[contains(@class,'leads_rectangle')]/div[1])[4]")
	WebElement averageFollowUpsValue;
	
	@FindBy(xpath ="//*[contains(@class,'leads_rectangle')][4]//img")
	WebElement averageFollowUpsIndicator;
	
	@FindBy(xpath = "//*[contains(@class,'leads_rectangle')][4]//span")
	WebElement averageFollowUpsIndicatorValue;
	
	@FindBy(xpath ="//*[contains(@id,'headlessui-listbox-button')]")
	WebElement durationDropDownButton;
	
	@FindBy(xpath ="//*[@role='listbox']//li/span")
	List<WebElement> dropDownValues;
	
	@FindBy(xpath ="(//*[@type='bar'])[1]//*[@class='apexcharts-datalabel']")
	List<WebElement> leadsGeneratedByCategories;
	
	@FindBy(xpath = "//*[text()='BUSINESS LEADS']")
	WebElement businessLeadsText;
	
	@FindBy(xpath = "//*[@seriesName='Generated' and @class='apexcharts-series']//*[name()='path']")
	List<WebElement> leadsGeneratedByBO;
	
	@FindBy(xpath = "//*[@seriesName='Converted' and @class='apexcharts-series']//*[name()='path']")
	List<WebElement> leadsConvertedByBO;
	
	@FindBy(xpath = "//*[text()='Reasons of lost cases']/parent::div/following-sibling::div//*[local-name()='svg']//*[name()='g']//*[name()='path']")
	List<WebElement> piechart;
	
	@FindBy(xpath = "//*[text()='Reasons of lost cases']/parent::div/following-sibling::div//*[local-name()='svg']//*[name()='g'][4]//*[name()='g']//*[name()='text']")
	List<WebElement> piechartTooltip;
	
	@FindBy(xpath = "//input[@placeholder='Select start Date']")
	WebElement startDateInput;

	@FindBy(xpath = "//input[@placeholder='Select End Date']")
	WebElement endDateInput;
	
	public int getLeadsGenetated() {
		
		try {
			
			int leadsGenerated=rupeeMatcher(leadsGeneratedValue);
			
			return leadsGenerated;
			
		} catch (Exception e) {
			
			e.printStackTrace();
			
			return 0;
		}
	}
	
	public int getLeadsConverted() {
		
		try {
			
			int leadsConverted=rupeeMatcher(leadsConvertedValue);
			
			return leadsConverted;
			
		} catch (Exception e) {
			
			e.printStackTrace();
			
			return 0;
		}
		
	} 
	
	public int getOverallLeadsGeneratedByCategory() {
		
		try {
			
			int total=0,temp=0;
			
			for(WebElement leads:leadsGeneratedByCategories) {
				
				temp=Integer.parseInt(leads.getText());
				
				total=temp+total;
				
			}
			
			System.out.println("TOTAL LEADS GENERATED : "+getLeadsGenetated());
			
			System.out.println(" TOTAL LEADS CONVERTED :"+getLeadsConverted());
			
//			System.out.println("Leads generated comparision : "+rupeeMatcher(leadsGeneratedIndicatorValue));
//			
//			System.out.println("Leads lost comparision value : "+rupeeMatcher(leadsLostIndicatorValue));
			
			System.out.println("TOTAL LEADS GENERATED BY CATEGORY : "+total);
			
			return total;
			
		} catch(Exception e) {
			
			e.printStackTrace();
			
			return 0;
			
		}
	}
	
	public int getLeadsGeneratedByBO() {
		
		try {
			
			jsMoveToElement(driver, businessLeadsText);
			
			int total=0,temp=0;
			
			for(WebElement leads:leadsGeneratedByBO) {
				
				temp=Integer.parseInt(leads.getAttribute("val"));
				
				total=temp+total;
			}
			
			System.out.println("Total Leads Generated by Business owner : "+total);
			
			return total;
			
		} catch (Exception e) {
			
			e.printStackTrace();
			
			return 0;
		}
		
	}
	
	public int getLeadsConvertedByBO() {
		
		try {
			
			jsMoveToElement(driver, businessLeadsText);
			
			int total=0,temp=0;
			
			for(WebElement leads:leadsConvertedByBO) {
				
				temp=Integer.parseInt(leads.getAttribute("val"));
				
				total=temp+total;
			}
			
			System.out.println("Total Leads Converted by Business owner : "+total);
			
			return total;
			
		} catch (Exception e) {
			
			e.printStackTrace();
			
			return 0;
		}
		
	}
	
	public void getPieChartValues() {
		
		try {
			
			for(WebElement pie:piechart) {
				
				hover(pie, driver);
				
				Thread.sleep(1500);
				
				for(WebElement tip:piechartTooltip) {
					
					System.out.println(tip.getText());
				}
			}
			
		} catch(Exception e) {
			
			e.printStackTrace();
		}
	}
	
	public boolean clickDropDownDuration(String duration, String startDate, String endDate) {

		try {

			durationDropDownButton.click();

			Thread.sleep(1500);

			for (WebElement time : dropDownValues) {

				if (time.getText().equals(duration)) {

					System.out.println("Selected Dropdown value : " + time.getText());

					time.click();

					Thread.sleep(1500);

					if (duration.equals("Custom Range")) {

						enterCustomDateRange(startDate, endDate);

						Thread.sleep(2000);
					}

					return true;
				}

			}

		} catch (Exception e) {

			e.printStackTrace();

			return false;
		}

		return false;

	}
	
	public boolean enterCustomDateRange(String startDate, String endDate) {

		try {
			
			System.out.println("Start Date : "+startDate);
			
			System.out.println("End Date : "+endDate);

			startDate = dashboardDateFormatter(startDate);

			endDate = dashboardDateFormatter(endDate);

			Thread.sleep(1000);
			
			enterStartDate(startDate, startDateInput);
			
			Thread.sleep(2000);
			
			enterEndDate(driver,endDate, endDateInput);

//			startDateInput.sendKeys(startDate);

//			categoryText.click();
//			startDateInput.sendKeys(Keys.RETURN);


//			Thread.sleep(1000);

//			endDateInput.sendKeys(endDate);
			// Send keys one by one
//	        for (char c : endDate.toCharArray()) {
//	            // Send each character
//	        	endDateInput.sendKeys(String.valueOf(c));
//	        	Thread.sleep(100);
//	        }
			
//			endDateInput.sendKeys(Keys.RETURN);

			categoryText.click();

			Thread.sleep(2000);
//			WebDriverWait wait=new WebDriverWait(driver, Duration.ofSeconds(5));
//			
//			wait.until(ExpectedConditions.visibilityOf(categoryText));
//
//			categoryText.click();

			return true;

		} catch (Exception e) {

			e.printStackTrace();

			return false;
		}
	}

}
